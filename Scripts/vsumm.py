# k means clustering to generate video summary
import sys
import imageio
import numpy as np
import cv2

# k-means
from sklearn.cluster import KMeans

# System Arguments
# Argument 1: Location of the video
# Argument 2: Sampling rate (k where every kth frame is chosed)
# Argument 3: Number of frames in the keyframe summany (Hence the number of cluster)
# Argument 4: 1: if 3D Histograms need to be generated and clustered, else 0

# defines the number of bins for pixel values of each type {r,g,b}
num_bins=16

# size of values in each bin
range_per_bin=256/num_bins

#frame chosen every k frames
sampling_rate=int(sys.argv[2])

# manual function to generate a 3D tensor representing histogram
# extremely slow
def generate_histogram(frame):
	print "Received frame"
	global num_bins, sampling_rate
	histogram=np.zeros((num_bins,num_bins,num_bins))
	for row in range(len(frame)):
		for col in range(len(frame[row])):
			r,g,b=frame[row][col]
			histogram[r/num_bins][g/num_bins][b/num_bins]+=1;
	return histogram
	print "Generated Histogram"

def main():
	global num_bins, sampling_rate
	print "Opening video!"
	video=imageio.get_reader(sys.argv[1]);
	print "Video opened\nChoosing frames"
	#choosing the subset of frames from which video summary will be generateed
	frames=[video.get_data(i*sampling_rate) for i in range(len(video)/sampling_rate)]
	print "Frames chosen"

	if len(sys.argv)>4 and int(sys.argv[4])==1:
		print "Generating 3D Tensor Histrograms"
		#manually generated histogram
		color_histogram=[generate_histogram(frame) for frame in frames]
		print "Color Histograms generated"

	#opencv: generates 3 histograms corresponding to each channel for each frame
	print "Generating linear Histrograms using OpenCV"
	channels=['b','g','r']
	hist=[]
	for frame in frames:
		feature_value=[cv2.calcHist([frame],[i],None,[num_bins],[0,256]) for i,col in enumerate(channels)]
		hist.append(np.asarray(feature_value).flatten())
	hist=np.asarray(hist)
	print "Done generating!"
	print "Shape of histogram: " + str(hist.shape)

	# clustering: defaults to using the histogram generated by OpenCV
	kmeans=KMeans(n_clusters=int(sys.argv[3])).fit(hist)
	
		
if __name__ == '__main__':
	main()